import pytest
from typing import List
from src.models import (
    AllIntegrations,
    RepoNameInfo,
    build_integration_classes_from_json,
)
from src.main import build_socless_info, parse_repo_names
import json


def load_mock_output_as_class(mock_socless_info_output_as_json) -> AllIntegrations:
    # output generated by running `python3 main.py "socless, socless-slack" --org-name="twilio-labs"` on 7/19/2021
    with open("tests/mock_output.json") as f:
        mock_output = json.loads(f.read())
    return build_integration_classes_from_json(mock_output)


def build_mock_repo_names() -> List[str]:
    mock_name_without_org = "socless"
    mock_name_with_custom_org = "noxasaxon/socless-jira"
    mock_name_with_same_org_as_default = "twilio-labs/socless-slack"
    mock_name_with_full_url_custom_org = "https://github.com/noxasaxon/socless-gsuite"
    all_mocks = [
        mock_name_without_org,
        mock_name_with_custom_org,
        mock_name_with_same_org_as_default,
        mock_name_with_full_url_custom_org,
    ]
    return all_mocks


def repo_name_assertions(
    parsed_names: List[RepoNameInfo], default_org: str, custom_org: str
):
    for repo_obj in parsed_names:
        if repo_obj.name == "socless":
            assert repo_obj.org == default_org
        elif repo_obj.name == "socless-jira":
            assert repo_obj.org == custom_org
        elif repo_obj.name == "socless-slack":
            assert repo_obj.org == default_org
        elif repo_obj.name == "socless-gsuite":
            assert repo_obj.org == custom_org
        else:
            raise NotImplementedError(
                f"no assertion set for this repo: name: {repo_obj.name} org: {repo_obj.org}"
            )


def test_parse_repo_names_as_comma_separated_string():
    default_org = "twilio-labs"
    custom_org = "noxasaxon"
    mock_repo_list = build_mock_repo_names()
    mock_repo_list_as_string = ",".join(mock_repo_list)

    result = parse_repo_names(mock_repo_list_as_string, default_org)
    assert len(result) == len(mock_repo_list)
    repo_name_assertions(result, default_org, custom_org)


#### NOTE: run with cmd `tox -- --github`
@pytest.mark.github
def test_output_structure(mock_socless_info_output_as_json):
    mock_output = build_integration_classes_from_json(mock_socless_info_output_as_json)
    output = build_socless_info(
        "socless, socless-slack",
        default_org="twilio-labs",
        output_file_path="socless_info.json",
    )

    assert output == mock_output
    assert output.json()
