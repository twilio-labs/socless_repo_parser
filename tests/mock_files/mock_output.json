{
    "integrations": [
        {
            "meta": {
                "repo_url": "https://github.com/twilio-labs/socless",
                "integration_family": "socless"
            },
            "functions": [
                {
                    "meta": {
                        "lambda_folder_name": "http_request",
                        "deployed_lambda_name": "socless_http_request",
                        "serverless_lambda_name": "HTTPRequest",
                        "supported_in_playbook": true
                    },
                    "resource_type": "socless_task",
                    "description": "Make any HTTP request using the requests library.",
                    "arguments": [
                        {
                            "name": "method",
                            "data_type": "string",
                            "required": true,
                            "description": "GET | POST | PUT | PATCH | DELETE",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "url",
                            "data_type": "string",
                            "required": true,
                            "description": "full url of the request destination",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "raise_for_status",
                            "data_type": "boolean",
                            "required": false,
                            "description": "(optional) raise an HTTPError if request failed",
                            "placeholder": true,
                            "internal": false,
                            "default_value": true
                        },
                        {
                            "name": "return_headers",
                            "data_type": "boolean",
                            "required": false,
                            "description": "(optional) include a 'headers' key of the http_response headers in this lambda's return dict.",
                            "placeholder": "",
                            "internal": false,
                            "default_value": false
                        },
                        {
                            "name": "auth",
                            "data_type": "array<>",
                            "required": false,
                            "description": "(optional) Auth array to enable Basic/Digest/Custom HTTP Auth.",
                            "placeholder": "",
                            "internal": false,
                            "default_value": []
                        }
                    ],
                    "supports_kwargs": true,
                    "return_statements": []
                },
                {
                    "meta": {
                        "lambda_folder_name": "_merge_parallel_output",
                        "deployed_lambda_name": "_socless_merge_parallel_output",
                        "serverless_lambda_name": "MergeParallelOutput",
                        "supported_in_playbook": false
                    },
                    "resource_type": "socless_task",
                    "description": "",
                    "arguments": [],
                    "supports_kwargs": false,
                    "return_statements": []
                },
                {
                    "meta": {
                        "lambda_folder_name": "_save_msg_resp_token",
                        "deployed_lambda_name": "_socless_save_msg_resp_token",
                        "serverless_lambda_name": "SaveMessageResponseToken",
                        "supported_in_playbook": false
                    },
                    "resource_type": "socless_task",
                    "description": "",
                    "arguments": [],
                    "supports_kwargs": false,
                    "return_statements": []
                },
                {
                    "meta": {
                        "lambda_folder_name": "counter",
                        "deployed_lambda_name": "_socless_counter",
                        "serverless_lambda_name": "Counter",
                        "supported_in_playbook": true
                    },
                    "resource_type": "socless_task",
                    "description": "Simple Counter",
                    "arguments": [
                        {
                            "name": "context",
                            "data_type": "null",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": true,
                            "default_value": null
                        },
                        {
                            "name": "state_name",
                            "data_type": "string",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "start",
                            "data_type": "number",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "delta",
                            "data_type": "number",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "direction",
                            "data_type": "string",
                            "required": false,
                            "description": "",
                            "placeholder": "up",
                            "internal": false,
                            "default_value": "up"
                        }
                    ],
                    "supports_kwargs": false,
                    "return_statements": [
                        {
                            "status": "Error",
                            "message": "Unsupported direction supplied to counter"
                        }
                    ]
                },
                {
                    "meta": {
                        "lambda_folder_name": "set_investigation_status",
                        "deployed_lambda_name": "socless_set_investigation_status",
                        "serverless_lambda_name": "SetInvestigationStatus",
                        "supported_in_playbook": true
                    },
                    "resource_type": "socless_task",
                    "description": "Set the Investigation ID to status.",
                    "arguments": [
                        {
                            "name": "investigation_id",
                            "data_type": "string",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "status",
                            "data_type": "string",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        }
                    ],
                    "supports_kwargs": false,
                    "return_statements": [
                        {
                            "result": "failure",
                            "message": "No investigation_id provided"
                        },
                        {
                            "result": "failure",
                            "message": ""
                        },
                        {
                            "result": "failure",
                            "message": ""
                        },
                        {
                            "result": "success"
                        }
                    ]
                },
                {
                    "meta": {
                        "lambda_folder_name": "playground",
                        "deployed_lambda_name": "_socless_playground",
                        "serverless_lambda_name": "Playground",
                        "supported_in_playbook": true
                    },
                    "resource_type": "socless_task",
                    "description": "This function is useful for testing things, feel free to modify",
                    "arguments": [
                        {
                            "name": "input",
                            "data_type": "string",
                            "required": false,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": ""
                        }
                    ],
                    "supports_kwargs": false,
                    "return_statements": [
                        {
                            "output": "input"
                        }
                    ]
                },
                {
                    "meta": {
                        "lambda_folder_name": "add_custom_mapping",
                        "deployed_lambda_name": "socless_add_custom_mapping",
                        "serverless_lambda_name": "AddCustomMapping",
                        "supported_in_playbook": true
                    },
                    "resource_type": "socless_task",
                    "description": "Add a key-value pair to the Socless custom mapping table",
                    "arguments": [
                        {
                            "name": "key",
                            "data_type": "string",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "value",
                            "data_type": "any",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        }
                    ],
                    "supports_kwargs": false,
                    "return_statements": []
                },
                {
                    "meta": {
                        "lambda_folder_name": "query_custom_mapping",
                        "deployed_lambda_name": "socless_query_custom_mapping",
                        "serverless_lambda_name": "QueryCustomMapping",
                        "supported_in_playbook": true
                    },
                    "resource_type": "socless_task",
                    "description": "Get a value from the Socless Custom Mappings Table.",
                    "arguments": [
                        {
                            "name": "key",
                            "data_type": "string",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        }
                    ],
                    "supports_kwargs": false,
                    "return_statements": [
                        {
                            "exists": true,
                            "mapping": "item"
                        },
                        {
                            "exists": false,
                            "mapping": {}
                        }
                    ]
                },
                {
                    "meta": {
                        "lambda_folder_name": "create_events",
                        "deployed_lambda_name": "socless_create_events",
                        "serverless_lambda_name": "CreateEvents",
                        "supported_in_playbook": true
                    },
                    "resource_type": "socless_task",
                    "description": "Creates a new event in Socless using the socless_create_events api from the socless_python library",
                    "arguments": [
                        {
                            "name": "event_context",
                            "data_type": "null",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": true,
                            "default_value": null
                        },
                        {
                            "name": "event_type",
                            "data_type": "string",
                            "required": true,
                            "description": "Human Readable Event name e.g 'Investigate Login'",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "details",
                            "data_type": "array<object>",
                            "required": true,
                            "description": "List of dictionaries containing the event details",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "playbook",
                            "data_type": "string",
                            "required": false,
                            "description": "The name of the playbook to execute",
                            "placeholder": "",
                            "internal": false,
                            "default_value": ""
                        },
                        {
                            "name": "dedup_keys",
                            "data_type": "array<>",
                            "required": false,
                            "description": "The keys to use to deduplicate the event",
                            "placeholder": "",
                            "internal": false,
                            "default_value": []
                        },
                        {
                            "name": "data_types",
                            "data_type": "object",
                            "required": false,
                            "description": "A mapping of what datatypes are contained in the event details",
                            "placeholder": "",
                            "internal": false,
                            "default_value": {}
                        },
                        {
                            "name": "add_to_details",
                            "data_type": "object",
                            "required": false,
                            "description": "A dictionary containing additional keys to add to each details dict",
                            "placeholder": "",
                            "internal": false,
                            "default_value": {}
                        }
                    ],
                    "supports_kwargs": false,
                    "return_statements": [
                        {
                            "completed": true
                        }
                    ]
                },
                {
                    "meta": {
                        "lambda_folder_name": "_setup_global_state_for_direct_invoked_playbook",
                        "deployed_lambda_name": "_socless_setup_global_state_for_direct_invoked_playbook",
                        "serverless_lambda_name": "SetupGlobalStateForDirectInvokedPlaybook",
                        "supported_in_playbook": false
                    },
                    "resource_type": "socless_task",
                    "description": "",
                    "arguments": [],
                    "supports_kwargs": false,
                    "return_statements": []
                },
                {
                    "meta": {
                        "lambda_folder_name": "cache_results",
                        "deployed_lambda_name": "socless_cache_results",
                        "serverless_lambda_name": "CacheResults",
                        "supported_in_playbook": true
                    },
                    "resource_type": "socless_task",
                    "description": "This integration helps to cache, return and (optionally) re-map fields of data so that it can be used by other States. Choice states particularly benefit from this integration as",
                    "arguments": [
                        {
                            "name": "execution_context",
                            "data_type": "null",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "entries",
                            "data_type": "any",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        }
                    ],
                    "supports_kwargs": false,
                    "return_statements": [
                        {
                            "cached": "entries"
                        }
                    ]
                },
                {
                    "meta": {
                        "lambda_folder_name": "_ship_playbook_logs",
                        "deployed_lambda_name": "_socless_ship_playbook_logs",
                        "serverless_lambda_name": "SavePlaybookExecutionLogs",
                        "supported_in_playbook": false
                    },
                    "resource_type": "socless_task",
                    "description": "",
                    "arguments": [],
                    "supports_kwargs": false,
                    "return_statements": []
                },
                {
                    "meta": {
                        "lambda_folder_name": "socless_log_findings",
                        "deployed_lambda_name": "socless_log_findings",
                        "serverless_lambda_name": "SoclessLogFindings",
                        "supported_in_playbook": true
                    },
                    "resource_type": "socless_task",
                    "description": "Create a log file and upload it to SOCless logging bucket.",
                    "arguments": [
                        {
                            "name": "context",
                            "data_type": "object",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": true,
                            "default_value": null
                        },
                        {
                            "name": "investigation_escalated",
                            "data_type": "boolean",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "findings",
                            "data_type": "string",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "metadata",
                            "data_type": "object",
                            "required": false,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": {}
                        }
                    ],
                    "supports_kwargs": false,
                    "return_statements": []
                },
                {
                    "meta": {
                        "lambda_folder_name": "aws_request",
                        "deployed_lambda_name": "socless_aws_request",
                        "serverless_lambda_name": "AWSRequest",
                        "supported_in_playbook": true
                    },
                    "resource_type": "socless_task",
                    "description": "The AWS Request integration enables users call any AWS API.",
                    "arguments": [
                        {
                            "name": "service_name",
                            "data_type": "string",
                            "required": true,
                            "description": "",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "operation",
                            "data_type": "string",
                            "required": true,
                            "description": "The boto3 client operation you want to perform, e.g put_object",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "operation_parameters",
                            "data_type": "object",
                            "required": true,
                            "description": "Parameters for the operation. Required but can be empty dict for operations that don't take parameters",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "assume_role_config",
                            "data_type": "object",
                            "required": true,
                            "description": "Configuration for the role to assume to perform the operation. See https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html#STS.Client.assume_role\nfor a full list of values. Common values include `RoleArn`, `RoleSessionName` and `ExternalId`",
                            "placeholder": "",
                            "internal": false,
                            "default_value": null
                        },
                        {
                            "name": "disable_pagination",
                            "data_type": "boolean",
                            "required": false,
                            "description": "Set to true to disable pagination",
                            "placeholder": "",
                            "internal": false,
                            "default_value": false
                        },
                        {
                            "name": "save_to_vault",
                            "data_type": "boolean",
                            "required": false,
                            "description": "Determines if to save the results to the SOCless vault if the results are too large for step functions",
                            "placeholder": "",
                            "internal": false,
                            "default_value": false
                        }
                    ],
                    "supports_kwargs": false,
                    "return_statements": []
                }
            ]
        }
    ]
}